{"mappings":"AAEA,MAAMA,EAAoB,CACxBC,QAAS,uBACTC,KAAM,wBACNC,OAAQ,cACRC,GAAI,qBAGAC,EAAoBC,OAAOC,KAAKP,GAAmBQ,QAAO,CAACC,EAAKC,KAI7D,IACFD,EACH,CALaT,EAAkBU,IAChBA,KAMhB,CAAC,GAqBWC,cAAcC,QAAQC,QAAQ,CAC3CC,aAAYC,SAAEA,EAAQC,MAAEA,IACtB,MAAMC,EAAaD,EAAQ,gBAAgBA,KAAW,SAEtD,OAAID,EACK,GAAGA,OAAcE,IAGnBA,CACT,EAEAC,WAAUC,SAAEA,EAAQC,WAAEA,EAAUC,SAAEA,IAChC,MAAMC,EAAWD,EAASE,KAAKC,MAAM,kBAC/BC,EAAU,GAAGH,EAAWA,EAAS,GAAK,MAEtCI,EAAeN,EAAWL,SAC5B,GA/BiBY,EA+BEP,EAAWL,UA9BhBV,EAAkBsB,IAASA,GAE5BC,MAAM,KAAKC,IAAIC,oBAAoBC,KAAK,QA6BrD,GAhCR,IAAyBJ,EAiCrB,MAAMK,EAAkB,CAAC,EAErBZ,EAAWJ,QACbgB,EAAgBhB,MAAQc,mBAAmBV,EAAWJ,QAEhC,IAApBI,EAAWa,OACbD,EAAgBC,KAAOb,EAAWa,MAEhCb,EAAWc,SACbF,EAAgBE,OAASd,EAAWc,OAAOL,IAAIC,qBAQjD,MAAO,GAAGL,eAAqBC,IALXP,EAASgB,UAAUH,EAAiB,CACtDI,gBAAgB,EAChBC,YAAa,YAIjB,EAEAC,UAASnB,SAAEA,EAAQE,SAAEA,IACnB,MAAMkB,EAAkBlB,EAASmB,SAAShB,MAAM,yBAC1CT,GA9Ce0B,EA+CnBF,GAAoBA,EAAgB,IAAO,IA9C3BvC,EAAkByC,IAASA,GAE5Bb,MAAM,KAAKC,IAAIa,oBAAoBX,KAAK,MAH7D,IAAyBU,EAiDrB,MAAMzB,MACJA,EAAQ,GAAAiB,KACRA,EAAIC,OACJA,EAAS,IACPf,EAASwB,MAAMtB,EAASuB,OAAOC,MAAM,IAEnCC,EAAYC,MAAMC,QAAQd,GAAUA,EAAS,CAACA,GAAQe,OAAOC,SAEnE,MAAO,CACLlC,MAAO0B,mBAAmB1B,G,KAC1BiB,EACAC,OAAQY,EAAUjB,IAAIa,oB,SACtB3B,EAEJ","sources":["search-routingCompany.js"],"sourcesContent":["/* global instantsearch */\n\nconst encodedCategories = {\n  Cameras: \"Cameras & Camcorders\",\n  Cars: \"Car Electronics & GPS\",\n  Phones: \"Cell Phones\",\n  TV: \"TV & Home Theater\",\n};\n\nconst decodedCategories = Object.keys(encodedCategories).reduce((acc, key) => {\n  const newKey = encodedCategories[key];\n  const newValue = key;\n\n  return {\n    ...acc,\n    [newKey]: newValue,\n  };\n}, {});\n\n// Returns a slug from the category name.\n// Spaces are replaced by \"+\" to make\n// the URL easier to read and other\n// characters are encoded.\nfunction getCategorySlug(name) {\n  const encodedName = decodedCategories[name] || name;\n\n  return encodedName.split(\" \").map(encodeURIComponent).join(\"+\");\n}\n\n// Returns a name from the category slug.\n// The \"+\" are replaced by spaces and other\n// characters are decoded.\nfunction getCategoryName(slug) {\n  const decodedSlug = encodedCategories[slug] || slug;\n\n  return decodedSlug.split(\"+\").map(decodeURIComponent).join(\" \");\n}\n\nconst router = instantsearch.routers.history({\n  windowTitle({ category, query }) {\n    const queryTitle = query ? `Results for \"${query}\"` : \"Search\";\n\n    if (category) {\n      return `${category} â€“ ${queryTitle}`;\n    }\n\n    return queryTitle;\n  },\n\n  createURL({ qsModule, routeState, location }) {\n    const urlParts = location.href.match(/^(.*?)\\/search/);\n    const baseUrl = `${urlParts ? urlParts[1] : \"\"}/`;\n\n    const categoryPath = routeState.category\n      ? `${getCategorySlug(routeState.category)}/`\n      : \"\";\n    const queryParameters = {};\n\n    if (routeState.query) {\n      queryParameters.query = encodeURIComponent(routeState.query);\n    }\n    if (routeState.page !== 1) {\n      queryParameters.page = routeState.page;\n    }\n    if (routeState.brands) {\n      queryParameters.brands = routeState.brands.map(encodeURIComponent);\n    }\n\n    const queryString = qsModule.stringify(queryParameters, {\n      addQueryPrefix: true,\n      arrayFormat: \"repeat\",\n    });\n\n    return `${baseUrl}job-search/${categoryPath}${queryString}`;\n  },\n\n  parseURL({ qsModule, location }) {\n    const pathnameMatches = location.pathname.match(/job-search\\/(.*?)\\/?$/);\n    const category = getCategoryName(\n      (pathnameMatches && pathnameMatches[1]) || \"\"\n    );\n    const {\n      query = \"\",\n      page,\n      brands = [],\n    } = qsModule.parse(location.search.slice(1));\n    // `qs` does not return an array when there's a single value.\n    const allBrands = Array.isArray(brands) ? brands : [brands].filter(Boolean);\n\n    return {\n      query: decodeURIComponent(query),\n      page,\n      brands: allBrands.map(decodeURIComponent),\n      category,\n    };\n  },\n});\n\nconst stateMapping = {\n  stateToRoute(uiState) {\n    // refer to uiState docs for details: https://www.algolia.com/doc/api-reference/widgets/ui-state/js/\n    return {\n      query: uiState.seo_jobs.query,\n      page: uiState.seo_jobs.page,\n      brands:\n        uiState.seo_jobs.refinementList &&\n        uiState.seo_jobs.refinementList.brand,\n      category: uiState.seo_jobs.menu && uiState.seo_jobs.menu.categories,\n    };\n  },\n\n  routeToState(routeState) {\n    // refer to uiState docs for details: https://www.algolia.com/doc/api-reference/widgets/ui-state/js/\n    return {\n      // eslint-disable-next-line camelcase\n      seo_jobs: {\n        query: routeState.query,\n        page: routeState.page,\n        menu: {\n          categories: routeState.category,\n        },\n        refinementList: {\n          brand: routeState.brands,\n        },\n      },\n    };\n  },\n};\n\nconst searchRouting = {\n  router,\n  stateMapping,\n};\n\nexport default searchRouting;\n"],"names":["$721265bf8683a1e6$var$encodedCategories","Cameras","Cars","Phones","TV","$721265bf8683a1e6$var$decodedCategories","Object","keys","reduce","acc","key","instantsearch","routers","history","windowTitle","category","query","queryTitle","createURL","qsModule","routeState","location","urlParts","href","match","baseUrl","categoryPath","name","split","map","encodeURIComponent","join","queryParameters","page","brands","stringify","addQueryPrefix","arrayFormat","parseURL","pathnameMatches","pathname","slug","decodeURIComponent","parse","search","slice","allBrands","Array","isArray","filter","Boolean"],"version":3,"file":"index.00880b7f.js.map"}